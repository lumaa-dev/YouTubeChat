architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    clientOnlyMinecraftJar()

    launches {
        if (project.hasProperty("username") && project.hasProperty("uuid")) {
            client {
                arg "--username", "${username}", "--uuid", "${uuid}"
            }
        }
    }
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven {
        name "ModMenu Maven"
        url "https://maven.terraformersmc.com/releases/"
    }
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${fabric_api_version}"
    modApi "com.terraformersmc:modmenu:${modmenu_version}"

    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    implementation(group: "com.google.apis", name: "google-api-services-youtube", version: project.api_services_youtube) {
        exclude(group: "org.apache.httpcomponents")
        exclude(group: "commons-logging")
        exclude(group: "commons-codec")
        exclude(group: "com.google.guava")
        exclude(group: "com.google.code.gson")
        exclude(group: "com.google.code.findbugs")
        exclude(group: "com.google.errorprone")
        exclude(group: "com.google.j2objc")
        exclude(group: "org.checkerframework")
    }
    implementation(group: "com.google.oauth-client", name: "google-oauth-client-jetty", version: project.oauth_client_jetty) {
        exclude(group: "org.apache.httpcomponents")
        exclude(group: "commons-logging")
        exclude(group: "commons-codec")
        exclude(group: "com.google.guava")
        exclude(group: "com.google.code.gson")
        exclude(group: "com.google.code.findbugs")
        exclude(group: "com.google.errorprone")
        exclude(group: "com.google.j2objc")
        exclude(group: "org.checkerframework")
    }
    implementation(group: "com.google.api-client", name: "google-api-client", version: project.api_client) {
        exclude(group: "org.apache.httpcomponents")
        exclude(group: "commons-logging")
        exclude(group: "commons-codec")
        exclude(group: "com.google.guava")
        exclude(group: "com.google.code.gson")
        exclude(group: "com.google.code.findbugs")
        exclude(group: "com.google.errorprone")
        exclude(group: "com.google.j2objc")
        exclude(group: "org.checkerframework")
    }
    implementation(group: "com.google.http-client", name: "google-http-client", version: project.http_client) {
        exclude(group: "org.apache.httpcomponents")
        exclude(group: "commons-logging")
        exclude(group: "commons-codec")
        exclude(group: "com.google.guava")
        exclude(group: "com.google.code.gson")
        exclude(group: "com.google.code.findbugs")
        exclude(group: "com.google.errorprone")
        exclude(group: "com.google.j2objc")
        exclude(group: "org.checkerframework")
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", rootProject.mod_version

    filesMatching("fabric.mod.json") {
        expand "version": rootProject.mod_version
    }
}

license {
    header = rootProject.file("LICENSE-header.txt")
    include "**/*.java"
}

String fileName = "${archives_base_name}-mc${mc_version}"

shadowJar {
    project.configurations.implementation.canBeResolved true
    configurations = [project.configurations.shadowCommon, project.configurations.implementation]

    relocate "blue.endless", "com.stevekung.ytc.relocate.blue.endless"
    relocate "com.google.api", "com.stevekung.ytc.relocate.com.google.api"
    relocate "com.google.j2objc", "com.stevekung.ytc.relocate.com.google.j2objc"
    relocate "com.moandjiezana", "com.stevekung.ytc.relocate.com.moandjiezana"
    relocate "io", "com.stevekung.ytc.relocate.io"
    relocate "javax.annotation", "com.stevekung.ytc.relocate.javax.annotation"
    relocate "org.yaml", "com.stevekung.ytc.relocate.org.yaml"
    relocate "org.apache.commons", "com.stevekung.ytc.relocate.org.apache.commons"
    relocate "org.apache.http", "com.stevekung.ytc.relocate.org.apache.http"

    exclude "com/google/gson/**"
    exclude "META-INF/maven/**"
    exclude "META-INF/proguard/**"
    exclude "META-INF/DEPENDENCIES"
    exclude "mozilla/**"
    exclude "youtube.v3.json"

    archiveClassifier = "dev"
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

remapSourcesJar {
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "fabric"
    archiveVersion = "v${mod_version}"
    archiveBaseName = fileName
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

def uploadDebug = true

curseforge {
    apiKey = project.hasProperty("curseforge_api_token") ? project.curseforge_api_token : ""
    project {
        id = "302916"
        changelog = rootProject.file("CHANGE_LOG.md")
        changelogType = "markdown"
        releaseType = "release"
        addGameVersion "Fabric"
        addGameVersion "Java 17"
        addGameVersion project.mc_version

        mainArtifact(remapJar.archiveFile) {
            displayName = "[Fabric] " + fileName + "-v${mod_version}"
        }
        relations {
            requiredDependency "cloth-config"
            requiredDependency "fabric-api"
            optionalDependency "modmenu"
        }
        afterEvaluate {
            uploadTask.dependsOn(remapJar)
        }
        addArtifact shadowJar
        addArtifact remapSourcesJar
    }
    options {
        debug uploadDebug
        forgeGradleIntegration = false
    }
}

modrinth {
    debugMode = uploadDebug
    token = project.hasProperty("modrinth_api_token") ? project.modrinth_api_token : ""
    projectId = "youtube-chat"
    changelog = rootProject.file("CHANGE_LOG.md").text
    versionName = "[Fabric] YouTube Chat " + "v${mod_version}" + " for Minecraft " + project.mc_version
    versionNumber = project.mod_version + "-fabric"
    versionType = "release"
    uploadFile = remapJar
    additionalFiles = [shadowJar, remapSourcesJar]
    gameVersions = ["${mc_version}"]
    loaders = ["fabric"]
    dependencies {
        required.project "fabric-api"
        required.project "cloth-config"
        optional.project "modmenu"
    }
}