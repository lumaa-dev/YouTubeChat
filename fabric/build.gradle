plugins {
    id "com.github.johnrengelman.shadow" version "7.0.0"
    id "com.matthewprenger.cursegradle"
    id "org.cadixdev.licenser"
}

configurations {
    shadow
}

architectury {
    platformSetupLoomIde()
    fabric()
}

repositories {
    flatDir {
        dirs "libs"
    }
    maven {
        name "ModMenu Maven"
        url "https://maven.terraformersmc.com/releases/"
    }
}

loom {
    mixinConfig "mixins.youtube_chat.json"
}

license {
    header = rootProject.file("LICENSE-header.txt")
    include "**/*.java"
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modApi "me.shedaniel:architectury-fabric:${rootProject.architectury_version}"
    modApi "com.terraformersmc:modmenu:${rootProject.modmenu_version}"

    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    implementation(group: "com.google.apis", name: "google-api-services-youtube", version: "v3-rev20210601-1.31.0") {
        exclude(group: "com.google.guava")
        exclude(group: "com.google.code.gson")
    }
    implementation(group: "com.google.oauth-client", name: "google-oauth-client-jetty", version: "1.31.5") {
        exclude(group: "com.google.guava")
    }
    implementation(group: "com.google.api-client", name: "google-api-client", version: "1.31.5") {
        exclude(group: "com.google.guava")
        exclude(group: "com.google.code.gson")
    }
    implementation(group: "com.google.http-client", name: "google-http-client", version: "1.31.0") {
        exclude(group: "com.google.guava")
    }
    implementation(group: "com.google.http-client", name: "google-http-client-jackson2", version: "1.31.0") {
        exclude(group: "com.google.guava")
    }

    shadow(group: "com.google.apis", name: "google-api-services-youtube", version: "v3-rev20210601-1.31.0") {
        exclude(group: "com.google.guava")
        exclude(group: "com.google.code.gson")
    }
    shadow(group: "com.google.oauth-client", name: "google-oauth-client-jetty", version: "1.31.5") {
        exclude(group: "com.google.guava")
    }
    shadow(group: "com.google.api-client", name: "google-api-client", version: "1.31.5") {
        exclude(group: "com.google.guava")
        exclude(group: "com.google.code.gson")
    }
    shadow(group: "com.google.http-client", name: "google-http-client", version: "1.31.0") {
        exclude(group: "com.google.guava")
    }
    shadow(group: "com.google.http-client", name: "google-http-client-jackson2", version: "1.31.0") {
        exclude(group: "com.google.guava")
    }

    implementation(project(path: ":common")) {
        transitive = false
    }
    developmentFabric(project(path: ":common")) {
        transitive = false
    }
    shadow(project(path: ":common", configuration: "transformProductionFabric")) {
        transitive = false
    }

    if (file("libs/SteveKunG's-Lib-mc${mc_version}-fabric.jar").exists()) {
        modImplementation(":SteveKunG's-Lib-mc${mc_version}-fabric")
        include ":SteveKunG's-Lib-mc${mc_version}-fabric"
        println("Use existing deobf artifact")
    } else {
        modCompile("curse.maven:stevekungs-lib-296019:${rootProject.stevekung_lib_fabric_deobf}")
        println("Use CurseForge deobf artifact")
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

String fileName = "${rootProject.archives_base_name}-mc${rootProject.mc_version}"

jar {
    version "v${project.version}"
    baseName fileName
}

shadowJar {
    configurations = [project.configurations.shadow]

    relocate "com.fasterxml", "com.stevekung.ytc.relocate.com.fasterxml"
    relocate "com.google.api", "com.stevekung.ytc.relocate.com.google.api"
    relocate "com.google.j2objc", "com.stevekung.ytc.relocate.com.google.j2objc"
    relocate "io", "com.stevekung.ytc.relocate.io"
    relocate "javax", "com.stevekung.ytc.relocate.javax"
    relocate "org", "com.stevekung.ytc.relocate.org"

    exclude "META-INF/maven/**"
    exclude "META-INF/proguard/**"
    exclude "META-INF/DEPENDENCIES"
    exclude "mozilla/**"
    exclude "module-info.class"
    exclude "youtube.v3.json"
    exclude "dummyThing"

    classifier "dev"
    version "v${project.version}"
    baseName fileName
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
    classifier "source"
    version "v${project.version}"
    baseName fileName
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    classifier "fabric"
    version "v${project.version}"
    baseName fileName
}

artifacts {
    archives sourcesJar
    archives shadowJar
}

curseforge {
    if (project.hasProperty("upload_api_key")) {
        apiKey = project.upload_api_key
        project {
            id = "302916"
            changelog = file("../CHANGE_LOG.md")
            changelogType = "markdown"
            releaseType = "release"
            addGameVersion "Fabric"
            addGameVersion rootProject.mc_version

            mainArtifact(remapJar.archiveFile) {
                displayName = "[Fabric] ${rootProject.archives_base_name}-mc${rootProject.mc_version}-v${project.version}"
            }
            relations {
                requiredDependency "architectury-fabric"
                requiredDependency "fabric-api"
                embeddedLibrary "stevekungs-lib"
                embeddedLibrary "auto-config-updated-api"
                embeddedLibrary "cloth-config"
                optionalDependency "modmenu"
            }
            afterEvaluate {
                uploadTask.dependsOn(remapJar)
            }
            addArtifact sourcesJar
            addArtifact shadowJar
        }
        options {
            forgeGradleIntegration = false
        }
    }
}

afterEvaluate {
    tasks.curseforge302916.dependsOn remapJar
}