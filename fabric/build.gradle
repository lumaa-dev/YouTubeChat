loom {
    launches {
        client {
            arg "--username", "${username}", "--uuid", "${uuid}"
        }
    }
}

architectury {
    platformSetupLoomIde()
    fabric()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

repositories {
    maven {
        name "ModMenu Maven"
        url "https://maven.terraformersmc.com/releases/"
    }
}

license {
    header = rootProject.file("LICENSE-header.txt")
    include "**/*.java"
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    modApi "com.terraformersmc:modmenu:${rootProject.modmenu_version}"

    modImplementation("me.shedaniel.cloth:cloth-config-fabric:${rootProject.cloth_config_version}") {
        exclude(group: "net.fabricmc.fabric-api")
    }

    implementation(group: "com.google.apis", name: "google-api-services-youtube", version: rootProject.api_services_youtube) {
        exclude(group: "org.apache.httpcomponents")
        exclude(group: "commons-logging")
        exclude(group: "commons-codec")
        exclude(group: "com.google.guava")
        exclude(group: "com.google.code.gson")
        exclude(group: "com.google.code.findbugs")
        exclude(group: "com.google.errorprone")
        exclude(group: "com.google.j2objc")
        exclude(group: "org.checkerframework")
    }
    implementation(group: "com.google.oauth-client", name: "google-oauth-client-jetty", version: rootProject.oauth_client_jetty) {
        exclude(group: "org.apache.httpcomponents")
        exclude(group: "commons-logging")
        exclude(group: "commons-codec")
        exclude(group: "com.google.guava")
        exclude(group: "com.google.code.gson")
        exclude(group: "com.google.code.findbugs")
        exclude(group: "com.google.errorprone")
        exclude(group: "com.google.j2objc")
        exclude(group: "org.checkerframework")
    }
    implementation(group: "com.google.api-client", name: "google-api-client", version: rootProject.api_client) {
        exclude(group: "org.apache.httpcomponents")
        exclude(group: "commons-logging")
        exclude(group: "commons-codec")
        exclude(group: "com.google.guava")
        exclude(group: "com.google.code.gson")
        exclude(group: "com.google.code.findbugs")
        exclude(group: "com.google.errorprone")
        exclude(group: "com.google.j2objc")
        exclude(group: "org.checkerframework")
    }
    implementation(group: "com.google.http-client", name: "google-http-client", version: rootProject.http_client) {
        exclude(group: "org.apache.httpcomponents")
        exclude(group: "commons-logging")
        exclude(group: "commons-codec")
        exclude(group: "com.google.guava")
        exclude(group: "com.google.code.gson")
        exclude(group: "com.google.code.findbugs")
        exclude(group: "com.google.errorprone")
        exclude(group: "com.google.j2objc")
        exclude(group: "org.checkerframework")
    }

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

String fileName = "${rootProject.archives_base_name}-mc${rootProject.mc_version}"

shadowJar {
    project.configurations.implementation.canBeResolved true
    configurations = [project.configurations.shadowCommon, project.configurations.implementation]

    relocate "blue.endless", "com.stevekung.ytc.relocate.blue.endless"
    relocate "com.google.api", "com.stevekung.ytc.relocate.com.google.api"
    relocate "com.google.j2objc", "com.stevekung.ytc.relocate.com.google.j2objc"
    relocate "com.moandjiezana", "com.stevekung.ytc.relocate.com.moandjiezana"
    relocate "io", "com.stevekung.ytc.relocate.io"
    relocate "javax.annotation", "com.stevekung.ytc.relocate.javax.annotation"
    relocate "org.yaml", "com.stevekung.ytc.relocate.org.yaml"
    relocate "org.apache.commons", "com.stevekung.ytc.relocate.org.apache.commons"
    relocate "org.apache.http", "com.stevekung.ytc.relocate.org.apache.http"

    exclude "com/google/gson/**"
    exclude "META-INF/maven/**"
    exclude "META-INF/proguard/**"
    exclude "META-INF/DEPENDENCIES"
    exclude "mozilla/**"
    exclude "youtube.v3.json"

    archiveClassifier = "dev-shadow"
    archiveVersion = "v${project.version}"
    archiveBaseName = fileName
}

remapJar {
    inputFile.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "fabric"
    archiveVersion = "v${project.version}"
    archiveBaseName = fileName
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

curseforge {
    if (project.hasProperty("upload_api_key")) {
        apiKey = project.upload_api_key
        project {
            id = "302916"
            changelog = file("../CHANGE_LOG.md")
            changelogType = "markdown"
            releaseType = "release"
            addGameVersion "Fabric"
            addGameVersion "Java 17"
            addGameVersion rootProject.mc_version

            mainArtifact(remapJar.archiveFile) {
                displayName = "[Fabric] " + fileName + "-v${project.version}"
            }
            relations {
                requiredDependency "cloth-config"
                requiredDependency "fabric-api"
                optionalDependency "modmenu"
            }
            afterEvaluate {
                uploadTask.dependsOn(remapJar)
            }
        }
        options {
            forgeGradleIntegration = false
        }
    }
}