architectury {
    platformSetupLoomIde()
    forge()
}

configurations {
    common
    shadowCommon
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentForge.extendsFrom common
}

loom {
    launches {
        client {
            arg "--username", "${username}", "--uuid", "${uuid}"
        }
    }
}

license {
    header = rootProject.file("LICENSE-header.txt")
    include "**/*.java"
}

dependencies {
    forge "net.minecraftforge:forge:${rootProject.mc_version}-${rootProject.forge_version}"

    forgeDependencies(implementation(shadowCommon(group: "com.google.apis", name: "google-api-services-youtube", version: rootProject.api_services_youtube))) {
        exclude(group: "org.apache.httpcomponents")
        exclude(group: "commons-logging")
        exclude(group: "commons-codec")
        exclude(group: "com.google.guava")
        exclude(group: "com.google.code.gson")
        exclude(group: "com.google.code.findbugs")
        exclude(group: "com.google.errorprone")
        exclude(group: "com.google.j2objc")
        exclude(group: "org.checkerframework")
    }
    forgeDependencies(implementation(shadowCommon(group: "com.google.oauth-client", name: "google-oauth-client-jetty", version: rootProject.oauth_client_jetty))) {
        exclude(group: "org.apache.httpcomponents")
        exclude(group: "commons-logging")
        exclude(group: "commons-codec")
        exclude(group: "com.google.guava")
        exclude(group: "com.google.code.gson")
        exclude(group: "com.google.code.findbugs")
        exclude(group: "com.google.errorprone")
        exclude(group: "com.google.j2objc")
        exclude(group: "org.checkerframework")
    }
    forgeDependencies(implementation(shadowCommon(group: "com.google.api-client", name: "google-api-client", version: rootProject.api_client))) {
        exclude(group: "org.apache.httpcomponents")
        exclude(group: "commons-logging")
        exclude(group: "commons-codec")
        exclude(group: "com.google.guava")
        exclude(group: "com.google.code.gson")
        exclude(group: "com.google.code.findbugs")
        exclude(group: "com.google.errorprone")
        exclude(group: "com.google.j2objc")
        exclude(group: "org.checkerframework")
    }
    forgeDependencies(implementation(shadowCommon(group: "com.google.http-client", name: "google-http-client", version: rootProject.http_client))) {
        exclude(group: "org.apache.httpcomponents")
        exclude(group: "commons-logging")
        exclude(group: "commons-codec")
        exclude(group: "com.google.guava")
        exclude(group: "com.google.code.gson")
        exclude(group: "com.google.code.findbugs")
        exclude(group: "com.google.errorprone")
        exclude(group: "com.google.j2objc")
        exclude(group: "org.checkerframework")
    }

    modRuntimeOnly "curse.maven:configured-457570:${rootProject.configured_version}"
    modRuntimeOnly "curse.maven:catalogue-459701:${rootProject.catalogue_version}"

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionForge")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("META-INF/mods.toml") {
        expand "version": project.version
    }
}

String fileName = "${rootProject.archives_base_name}-mc${rootProject.mc_version}"

shadowJar {
    configurations = [project.configurations.shadowCommon]

    relocate "blue.endless", "com.stevekung.ytc.relocate.blue.endless"
    relocate "com.google.api", "com.stevekung.ytc.relocate.com.google.api"
    relocate "com.google.j2objc", "com.stevekung.ytc.relocate.com.google.j2objc"
    relocate "com.moandjiezana", "com.stevekung.ytc.relocate.com.moandjiezana"
    relocate "io", "com.stevekung.ytc.relocate.io"
    relocate "javax.annotation", "com.stevekung.ytc.relocate.javax.annotation"
    relocate "org.yaml", "com.stevekung.ytc.relocate.org.yaml"
    relocate "org.apache.commons", "com.stevekung.ytc.relocate.org.apache.commons"
    relocate "org.apache.http", "com.stevekung.ytc.relocate.org.apache.http"

    exclude "com/google/gson/**"
    exclude "META-INF/maven/**"
    exclude "META-INF/proguard/**"
    exclude "META-INF/DEPENDENCIES"
    exclude "mozilla/**"
    exclude "youtube.v3.json"

    archiveClassifier = "dev-shadow"
    archiveVersion = "v${project.version}"
    archiveBaseName = fileName
}

remapJar {
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "forge"
    archiveVersion = "v${project.version}"
    archiveBaseName = fileName
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

curseforge {
    if (project.hasProperty("upload_api_key")) {
        apiKey = project.upload_api_key
        project {
            id = "302916"
            changelog = file("../CHANGE_LOG.md")
            changelogType = "markdown"
            releaseType = "release"
            addGameVersion "Forge"
            addGameVersion "Java 17"
            addGameVersion rootProject.mc_version

            mainArtifact(remapJar.archiveFile) {
                displayName = "[Forge] " + fileName + "-v${project.version}"
            }
            relations {
                optionalDependency "configured"
            }
            afterEvaluate {
                uploadTask.dependsOn(remapJar)
            }
        }
        options {
            forgeGradleIntegration = false
        }
    }
}